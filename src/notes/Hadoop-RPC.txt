Q:  客户端sendPing没返回值如何知道服务器是否仍在工作？
A:  sendPing中通过socket输出流向服务器发送数据,若发送成功，则表明服务器正常工作，否则抛出异常表明服务器关闭。
    异常时在上层receiveResponse的catch语句中,通过markClosed(e)关闭当前连接。

Q:  服务器端connection的返回response的过程?
A:  在Handler中,若当前call所属的collection的respondQueue只有一个元素，则直接将那个元素的response返回给客户端。
    否则，通过Responder监听通道可写事件，可写时从respondQueue选取一个call,将response发送回客户端。
    (call注册到Responder的选择器中逻辑尚未理清，为什么只在handler不能一次性发送response时才注册？)

Q:  客户端collection的复用过程？
    在同一个代理上多次调用同一个CollectionId的不同方法时，若之前的call尚未返回，而后来的call又创建Socket对象，
    以及输入输出流，由于socket和输入输出流的覆盖，是否会导致之前在等待返回的call得不到返回值？
A:  客户端中一个collection可管理多个call对象，由于服务器的异步返回，可能同时存在多个call对象。
    问题描述:
    由getConnection的实现代码:
    do {
          synchronized (connections) {
            connection = connections.get(remoteId);
            if (connection == null) {
              connection = new Connection(remoteId);
              connections.put(remoteId, connection);
            }
          }
        } while (!connection.addCall(call));
        connection.setupIOstreams();
    可知，若使用之前缓存的collection对象，仍然会在setupIOstreams中通过setupConnection调用创建新的Socket对象,
    如下:
    this.socket = socketFactory.createSocket();
    之后同服务器建立连接:
    NetUtils.connect(this.socket, server, 20000);
    而后,通过新建的Socket获得输入输出流，向服务器写RPC头和连接头，等待发送Invocation,即要调用服务器中的方法
    和参数，在run函数中等待数据的获取。
    这样，后来的call的输入输出流覆盖了原来的输入输出流，是否可能导致原来的call得不到response？
    猜测:虽然建立了不同的Socket对象，但由于同一个collection有一样的CollectionId，即目的SocketAddress一样，
    虽然原来输入输出流被覆盖了，输入输出流对象不一样，但最终的Socket输入输出流读取或写入的最终位置一样，
    原来的call就能获取response了。
    (   就算重新创建Socket对象和输入输出流也算了，但是在setupIOstreams又重新启动线程。如下:
        writeHeader();
        touch();
        start();
        setupIOstreams中建立连接后，先发送RPC头，然后写连接头，更新活动时间，启动线程。
        而之前的call若在run方法中等待response(处于receiveResponse的读操作中)，如下：
        public void run() {
            if (LOG.isDebugEnabled())
              LOG.debug(getName() + ": starting, having connections "
                  + connections.size());

            while (waitForWork()) {//wait here for work - read or close connection
              receiveResponse();
            }

            close();

            if (LOG.isDebugEnabled())
              LOG.debug(getName() + ": stopped, remaining connections "
                  + connections.size());
        }
       这时线程被重新启动，不知道会发生什么?
    )
    这里感觉还是很混乱，始终没理解透。

Q:  服务器端的collection复用问题?
    每次accept后都创建一个collection对象，之后读取到Invocation后建立Call对象管理collection，怎么看都是一个call对应一个collection，
    对应过来，就是客户端的Call对应一个服务器端的collection，那collection中的responseQueue还有什么用?最多就一个call在里面啊？
    服务器端复用也没理解透。
